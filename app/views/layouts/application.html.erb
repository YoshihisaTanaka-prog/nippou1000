<!DOCTYPE html>
<html>
  <head>
    <title>Nippou1000</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
      (function ($) {
        $.fn.autoKana = function (element1, element2, passedOptions) {

          var options = $.extend(
              {
                  'katakana': false
              }, passedOptions);

          var kana_extraction_pattern = new RegExp('[^ 　ぁあ-んー]', 'g');
          var kana_compacting_pattern = new RegExp('[ぁぃぅぇぉっゃゅょ]', 'g');
          var elName, elKana, active = false, timer = null, flagConvert = true, input, values, ignoreString, baseKana;

          elName = $(element1);
          elKana = $(element2);
          active = true;
          _stateClear();

          elName.blur(_eventBlur);
          elName.focus(_eventFocus);
          elName.keydown(_eventKeyDown);

          function start() {
            active = true;
          };

          function stop() {
            active = false;
          };

          function toggle(event) {
            var ev = event || window.event;
            if (event) {
              var el = Event.element(event);
              if (el.checked) {
                active = true;
              } else {
                active = false;
              }
            } else {
              active = !active;
            }
          };

          function _checkConvert(new_values) {
            if (!flagConvert) {
              if (Math.abs(values.length - new_values.length) > 1) {
                var tmp_values = new_values.join('').replace(kana_compacting_pattern, '').split('');
                if (Math.abs(values.length - tmp_values.length) > 1) {
                  _stateConvert();
                }
              } else {
                if (values.length == input.length && values.join('') != input) {
                  if (input.match(kana_extraction_pattern)) {
                    _stateConvert();
                  }
                }
              }
            }
          };

          function _checkValue() {
            var new_input, new_values;
            new_input = elName.val()
            if (new_input == '' && elKana.val() != '') {
              _stateClear();
              _setKana();
            } else {
              new_input = _removeString(new_input);
              if (input == new_input) {
                return;
              } else {
                input = new_input;
                if (!flagConvert) {
                  new_values = new_input.replace(kana_extraction_pattern, '').split('');
                  _checkConvert(new_values);
                  _setKana(new_values);
                }
              }
            }
          };

          function _clearInterval() {
            clearInterval(timer);
          };

          function _eventBlur(event) {
            _clearInterval();
          };
          function _eventFocus(event) {
            _stateInput();
            _setInterval();
          };
          function _eventKeyDown(event) {
            if (flagConvert) {
              _stateInput();
            }
          };
          function _isHiragana(chara) {
            return ((chara >= 12353 && chara <= 12435) || chara == 12445 || chara == 12446);
          };
          function _removeString(new_input) {
            if (new_input.indexOf(ignoreString) !== -1) {
              return new_input.replace(ignoreString, '');
            } else {
              var i, ignoreArray, inputArray;
              ignoreArray = ignoreString.split('');
              inputArray = new_input.split('');
              for (i = 0; i < ignoreArray.length; i++) {
                if (ignoreArray[i] == inputArray[i]) {
                  inputArray[i] = '';
                }
              }
              return inputArray.join('');
            }
          };
          function _setInterval() {
            var self = this;
            timer = setInterval(_checkValue, 30);
          };
          function _setKana(new_values) {
            if (!flagConvert) {
              if (new_values) {
                values = new_values;
              }
              if (active) {
                var _val = _toKatakana(baseKana + values.join(''));
                elKana.val(_val).change();
              }
            }
          };
          function _stateClear() {
            baseKana = '';
            flagConvert = false;
            ignoreString = '';
            input = '';
            values = [];
          };
          function _stateInput() {
            baseKana = elKana.val();
            flagConvert = false;
            ignoreString = elName.val();
          };
          function _stateConvert() {
            baseKana = baseKana + values.join('');
            flagConvert = true;
            values = [];
          };
          function _toKatakana(src) {
            if (options.katakana) {
              var c, i, str;
              str = new String;
              for (i = 0; i < src.length; i++) {
                c = src.charCodeAt(i);
                if (_isHiragana(c)) {
                  str += String.fromCharCode(c + 96);
                } else {
                  str += src.charAt(i);
                }
              }
              return str;
            } else {
              return src;
            }
          }
        };
      })(jQuery);
      function setCSRFtoken() {
        $.ajaxPrefilter(function (options, originalOptions, jqXHR) {
          if (!options.crossDomain) {
            const token = $('meta[name="csrf-token"]').attr('content');
            if (token) {
              return jqXHR.setRequestHeader('X-CSRF-Token', token);
            }
          }
        });
      }
      function getGetParams(key, isArray = false) {
        const arr = window.location.search.split("?");
        if(arr.length == 1){
          return null;
        }
        var params = {};
        for(let element of arr[1].split("&")){
          let elemArr = element.split("=");
          if(isArray){
            if(params[elemArr[0]] == null){
              params[elemArr[0]] = [JSON.parse(elemArr[1])];
            } else {
              params[elemArr[0]].push(JSON.parse(elemArr[1]));
            }
          } else{
            params[elemArr[0]] = JSON.parse(elemArr[1]);
          }
        }
        return params[key];
      }
    </script>
  </head>

  <body>
    <%= link_to "使い方", "https://docs.google.com/presentation/d/1-wF1wUzpAckKl8ytzZTL-NflS3bph_P8EKCtCSDz69I/edit?usp=sharing", class: "big" %>
    <%= button_to "ログアウト", destroy_user_session_path, method: :delete if user_signed_in? %>
    <%= link_to "ユーザ情報の編集", edit_user_registration_path if user_signed_in? %>
    <h1 style="color: #f00; text-align: center;">外部システムなので社外秘の情報は入力しないこと！</h1>
    <%= yield %>
    <div id="zoho-dummy"></div>
    <script type="text/javascript" id="zsiqchat">
      var last = $("div:last");
      if(last.attr("id") != "zoho-dummy"){
        last.remove();
      }
      var $zoho=$zoho || {};
      $zoho.salesiq = $zoho.salesiq || {
        widgetcode: "d30037192ca4ca1b2fd70380f5247bc8e62aa78b81354cd994ea78641b713a52",
        values: {},
        ready: function(){}
      };
      if($("#zsiqscript").length){
        console.log("exists");
      } else{
        var d=document;
        s=d.createElement("script");
        s.type="text/javascript";
        s.id="zsiqscript";
        s.defer=true;
        s.src="https://salesiq.zohopublic.jp/widget";
        t=d.getElementsByTagName("script")[0];
        t.parentNode.insertBefore(s,t);
        console.log("zoho");
      }
      $("input[name='authenticity_token']").val( $("meta[name='csrf-token']").attr("content") );
    </script>
  </body>
</html>
